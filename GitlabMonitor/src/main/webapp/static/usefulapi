package data;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Scanner;

import org.json.JSONObject;

import vo.ProjectBaseInfoVO;
import vo.UserBaseInfoVO;

public class DateCache {
	private static HashMap<String, ProjectBaseInfoVO> projectBaseInfo;
	private static HashMap<String, UserBaseInfoVO> userBaseInfo;
	private static String[] projectNames;
	private static String[] userNames;

	public static void cache() {
		// Long a = System.currentTimeMillis();
		// JSONArray projectInfo = new
		// JSONArray(URLManager.getJSONString(URLType.ALL_REPOSITORY_NAME,
		// null));
		// int len = projectInfo.length();
		// projectNames = new String[len];
		// for (int i = 0; i < len; i++)
		// projectNames[i] = (String) projectInfo.get(i);
		//
		// TreeSet<String> nameSet = new TreeSet<String>();
		// for (int i = 0; i < projectNames.length; i++)
		// nameSet.add(projectNames[i].split("/")[0]);
		//
		// int length = nameSet.size();
		// userNames = new String[length];
		// int i = 0;
		// for (String s : nameSet) {
		// userNames[i] = s;
		//
		// i++;
		// }
		//
		// projectBaseInfo = new HashMap<String, ProjectBaseInfoVO>();
		// String result = URLManager.getJSONString(URLType.ALL_REPOSITORY_INFO,
		// "1");
		// int page = 1;
		// System.out.println("等35秒先");
		// while (!result.equals("[]")) {
		// System.out.println(page);
		// page++;
		// JSONArray projects = new JSONArray(result);
		//
		// for (int j = 0; j < projects.length(); j++) {
		//
		// JSONObject project = new JSONObject(projects.get(j).toString());
		// String name = null;
		// try {
		// name = project.getString("full_name");
		//
		// } catch (Exception e) {
		// name = "unknow";
		// }
		//
		// String language = null;
		// try {
		// language = project.getString("language");
		// } catch (Exception e) {
		// language = "unknow";
		// }
		//
		// int forksCount = project.getInt("forks_count");
		// int starsCount = project.getInt("stargazers_count");
		// int contributorsCount = project.getInt("subscribers_count");
		// String description = null;
		// try {
		// description = project.getString("description");
		// } catch (Exception e) {
		// description = "no description";
		// }
		//
		// String date = null;
		// try {
		//
		// date = project.getString("updated_at");
		// } catch (Exception e) {
		// date = "unknow";
		// }
		//
		// ProjectBaseInfoVO baseInfo = new ProjectBaseInfoVO(language, name,
		// starsCount, forksCount,
		// contributorsCount, description, date);
		//
		// projectBaseInfo.put(name, baseInfo);
		// }
		//
		// result = URLManager.getJSONString(URLType.ALL_REPOSITORY_INFO, page +
		// "");
		// }
		//
		// //
		//
		// // userBaseInfo = new HashMap<String, UserBaseInfoVO>();
		// // for (int j = 0; j < userNames.length; j++) {
		// // JSONObject userInfo = null;
		// // try {
		// // userInfo = new
		// JSONObject(URLManager.getJSONString(URLType.USER_INFO,
		// // userNames[j]));
		// // } catch (Exception e) {
		// // userBaseInfo.put(userNames[j], new UserBaseInfoVO(userNames[j], 0,
		// 0,
		// // 0, "unknow"));
		// // continue;
		// // }
		// //
		// // int efficiencyCount = userInfo.getInt("public_repos");
		// // int quantityCount = userInfo.getInt("public_gists");
		// // int totalCount = userInfo.getInt("followers");
		// // String companys = URLManager.getJSONString(URLType.COMPANY_INFO,
		// // userNames[j]);
		// //
		// // UserBaseInfoVO baseInfo = new UserBaseInfoVO(userNames[j],
		// // efficiencyCount, quantityCount, totalCount,
		// // companys);
		// // System.out.println(userNames[j] + " " + baseInfo);
		// // userBaseInfo.put(userNames[j], baseInfo);
		// //
		// // }
		// private static HashMap<String, ProjectBaseInfoVO> projectBaseInfo;
		// private static HashMap<String, UserBaseInfoVO> userBaseInfo;
		// private static String[] projectNames;
		// private static String[] userNames;
		String workspace = System.getProperty("user.dir");

		projectBaseInfo = new HashMap<String, ProjectBaseInfoVO>();
		Scanner in = null;
		try {
			in = new Scanner(new File(workspace + "/file/repository.txt"));

		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		while (in.hasNextLine()) {
			JSONObject project = new JSONObject(in.nextLine());

			String name = null;
			try {
				name = project.getString("full_name");

			} catch (Exception e) {
				name = "unknow";
			}

			String language = null;
			try {
				language = project.getString("language");
			} catch (Exception e) {
				language = "unknow";
			}

			int forksCount = project.getInt("forks_count");
			int starsCount = project.getInt("stargazers_count");
			int contributorsCount = project.getInt("subscribers_count");
			String description = null;
			try {
				description = project.getString("description");
			} catch (Exception e) {
				description = "no description";
			}

			String date = null;
			try {

				date = project.getString("updated_at");
			} catch (Exception e) {
				date = "unknow";
			}
			String create = null;

			try {
				create = project.getString("created_at");
			} catch (Exception e) {
				create = "unknow";
			}

			ProjectBaseInfoVO baseInfo = new ProjectBaseInfoVO(language, name, starsCount, forksCount,
					contributorsCount, description, date, create);

			projectBaseInfo.put(name, baseInfo);
		}
		in.close();

		userBaseInfo = new HashMap<String, UserBaseInfoVO>();
		Scanner in1 = null;
		try {
			in1 = new Scanner(new File(workspace + "/file/user.txt"));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		while (in1.hasNextLine()) {
			JSONObject user = new JSONObject(in1.nextLine());
			String name = user.getString("login");
			int efficiencyCount = user.getInt("public_repos");
			int quantityCount = user.getInt("public_gists");
			int totalCount = user.getInt("followers");
			UserBaseInfoVO baseInfo = new UserBaseInfoVO(name, efficiencyCount, quantityCount, totalCount);

			userBaseInfo.put(name, baseInfo);
		}

		in1.close();

		Scanner in2 = null;
		try {
			in2 = new Scanner(new File(workspace + "/file/repositoryname.txt"));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		projectNames = in2.nextLine().split(",");

		in2.close();

		Scanner in3 = null;
		try {
			in3 = new Scanner(new File(workspace + "/file/username.txt"));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		userNames = in3.nextLine().split(",");

		in2.close();

	}

	public static String[] getProjectNames() {
		return projectNames;
	}

	public static ProjectBaseInfoVO getProjectBaseInfoVO(String name) {
		ProjectBaseInfoVO vo = null;
		try {
			vo = projectBaseInfo.get(name);
		} catch (Exception e) {
			vo = new ProjectBaseInfoVO("unknow", name, 0, 0, 0, "unknow", "unknow", "unknow");
		}
		return vo;
	}

	public static UserBaseInfoVO getUserBaseInfoVO(String name) {
		UserBaseInfoVO vo = null;
		try {

			vo = userBaseInfo.get(name);

		} catch (Exception e) {
			vo = new UserBaseInfoVO(name, 0, 0, 0);
		}
		return vo;
	}

	public static String[] getProjectName() {
		return projectNames;
	}

	public static String[] getUserName() {
		return userNames;
	}
}
